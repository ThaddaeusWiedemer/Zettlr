// Light theme for CodeMirror

// Editor styling
// Three editor instances can be styled: The main editor, the quicklook editor
// and the custom CSS editor

#editor .CodeMirror, /*.quicklook .body .CodeMirror,*/ .dialog .CodeMirror {
    color:rgb(46, 56, 60);

    &.cm-s-zettlr-code {
      // Code files have this theme applied (others have cm-s-zettlr-markdown)
      font-family: @font-code;
    }

    &.cm-stex-mode, &.cm-css-mode {
      font-family: @font-code;
        .cm-comment    { color: var(--grey-2); }
        .cm-attribute  { color: var(--blue-0); }
        .cm-builtin    { color: var(--blue-0); } // Some modes use this for keywords
        .cm-string     { color: var(--green-0); }
        .cm-string-2   { color: var(--gold-selection-dark); }
        .cm-variable   { color: var(--grey-6); }
        .cm-variable-2 { color: var(--green-selection-dark); }
        .cm-keyword    { color: var(--purple-selection); }
        .cm-property   { color: var(--orange-2); }
        .cm-type       { color: var(--orange-2); }
        .cm-atom       { color: var(--green-0); }
        .cm-number     { color: var(--blue-0); }
    }

    // Now general styling for variables

    // First generic variables
    .cm-comment, .cm-fenced-code, .cm-inline-math { color: var(--grey-3); }

    .cm-highlight { background-color: yellow; color: #333; }

    .cm-fenced-code, .cm-stex-mode {
      font-family: @font-code;
        &.cm-comment    { color: var(--grey-2); }
        &.cm-attribute  { color: var(--blue-0); }
        &.cm-builtin    { color: var(--blue-0); } // Some modes use this for keywords
        &.cm-string     { color: var(--green-0); }
        &.cm-string-2   { color: var(--gold-selection-dark); }
        &.cm-variable   { color: var(--grey-6); }
        &.cm-variable-2 { color: var(--green-selection-dark); }
        &.cm-keyword    { color: var(--purple-selection-dark); }
        &.cm-property   { color: var(--orange-2); }
        &.cm-type       { color: var(--orange-2); }
        &.cm-atom       { color: var(--green-0); }
        &.cm-number     { color: var(--blue-0); }
        &.cm-positive   { color: var(--green-0); }
        &.cm-negative   { color: var(--red-0); }
    }

    // HTML tags
    .cm-tag       { font-family: @font-code; color: var(--orange-2); }
    .cm-attribute { font-family: @font-code; color: var(--blue-0); }
    .cm-string    { font-family: @font-code; color: var(--green-0); }
    .cm-bracket   { font-family: @font-code; color: var(--grey-5); }

    // TYPOGRAPHY
    .cm-formatting-header-1, .cm-formatting-header-2, .cm-formatting-header-3,
    .cm-formatting-header-4, .cm-formatting-header-5, .cm-formatting-header-6,
    .cm-url { color: var(--c-primary); }

    .size-header-1, .size-header-2, .size-header-3,
    .size-header-4, .size-header-5, .size-header-6 { font-weight: bold; }

    // Style the code block line wrapper classes
    .code-block-line { background-color: #eee; }

    /* LISTS */
    .cm-formatting-list-ul,
    .cm-formatting-list-ol { color: var(--c-primary); }

    /* TYPOGRAPHY */
    .cm-quote, .cm-link, .cm-strong, .cm-em { color:var(--c-primary); }
    .cm-spell-error {
      text-decoration: underline;
      text-decoration-color: var(--orange-2);
      text-decoration-style: dotted;
      // Prevent skipping of low-baseline chars to prevent strange artefacts
      text-decoration-skip-ink: none;
    }
    .cm-zkn-tag,
    .cm-zkn-id,
    .cm-zkn-link,
    .cm-zkn-link-formatting,
    .cm-footnote-formatting {
      color:var(--c-primary);
    }

    .cm-footnote-formatting {
      font-weight: bold;
    }

    // cma = code-mirror-anchor
    .cma { color: var(--c-primary); font-weight: inherit; }

    // citations
    .citeproc-citation {
      background-color: var(--grey-0);
      &.error { color: var(--red-2); }
    }

    // Mermaid charts
    .mermaid-chart {
      // main body is grey to see extend of diagram
      // this needs to be set here as the setting for background
      // in the mermaid API only uses the background color info
      // for computation, not to actually set it
      svg{
        background-color: var(--mermaid-bg0);
      }
      // * {
      //   font-size: 16px;
      // }
      // stroke-width can't be controlled through API directly
      // some connectors inconsistently scale arrows with
      // lines, we can't make these thicker without breaking
      // the overall look
      *:not(.relation, .transition, .relationshipLine) {stroke-width: 2px;}
      [class="er relationshipLine"]{stroke-width: 1px;}
      // thicker arrows don't stand out enough
      // doesn't work at the moment
      // .edge-thickness-thick {stroke-width: 4px;}
      // bold text-elements should not be as bold
      text.messageText{stroke-width: 1px;}
      // some diagram types inconsistenly use transparency
      // the only place where we need transparency is to mute
      // the pie-chart colors and for the GANTT sections
      *:not(.pieCircle, .section1, .section3) {
        opacity: 1.0;
        fill-opacity: 1.0;
      }
      // pie chart
      // mermaid doesn't adjust the legend colors automatically
      .legend rect {opacity: 0.8;}
      // relationship diagram
      // odd-numbered lines are not controlled by other variables
      .attributeBoxOdd {fill: var(--mermaid-bg0)}
      // multiplicities should use correct colors
      #ZERO_OR_MORE_START *, #ZERO_OR_MORE_END *, #ONE_OR_MORE_START *,
      #ONE_OR_MORE_END *, #ONLY_ONE_START *, #ONLY_ONE_END *,
      #ZERO_OR_ONE_START *, #ZERO_OR_ONE_END *{
        stroke: var(--mermaid-pop);
      }
      #ZERO_OR_ONE_START circle, #ZERO_OR_ONE_END circle,
      #ZERO_OR_MORE_START circle, #ZERO_OR_MORE_END circle{
        fill: var(--mermaid-bg0);
      }
      // user journey diagram
      // tasks should have borders, but the task class is also used in
      // GANTT charts, so we need to select only elements without sublasses
      .journey-section, .task:not([class*="crit"], [class*="Crit"],
      [class*="active"], [class*="done"]){
        stroke: var(--mermaid-lines);
      }
      // actor-<number> classes are generated on demand, we need to capture
      // all of them are with the method below
      [class^="actor-"]:not(.actor-line){stroke: var(--mermaid-bg0)}
      // faces should have highlight color with high-contrast lines
      // to capture the eyes, a workaround with the circle radius is used
      .face {
        stroke: var(--mermaid-pop);
        fill: var(--mermaid-bg0);
      }
      .mouth, [r="1.5"] {
        stroke: var(--mermaid-pop);
        fill: var(--mermaid-pop);
      }
      // recolor actors
      .actor-0{fill: var(--mermaid-pie1)}
      .actor-1{fill: var(--mermaid-pie2)}
      .actor-2{fill: var(--mermaid-pie3)}
      .actor-3{fill: var(--mermaid-pie4)}
      .actor-4{fill: var(--mermaid-pie5)}
      .actor-5{fill: var(--mermaid-pie6)}
      .actor-6{fill: var(--mermaid-pie7)}
      .actor-7{fill: var(--mermaid-pie8)}
      .actor-8{fill: var(--mermaid-pie9)}
      .actor-9{fill: var(--mermaid-pie10)}
      .actor-10{fill: var(--mermaid-pie11)}
      .actor-11{fill: var(--mermaid-pie12)}
      // gantt chart
      // line color is overwritten in some internal function, fix it here
      .tick [stroke="currentColor"], .grid [stroke="currentColor"]{
        stroke: var(--mermaid-lines);
      }
      // text color of critical tasks can't be controlled directly
      // [class*=critText]{fill: var(--mermaid-bg0)}
      [class*=activeText], [class*=activeCritText]{fill: var(--mermaid-bg0) !important}
      // section need opacity because grid-lines are rendered beneath them
      // we remove the fill for odd sections and re-order even sections to
      // render in the background
      .section0, .section2 {fill: none;}
      // .section1, .section3 {
      //   // z-index: 1;
      //   // position: relative;
      //   stroke: var(--mermaid-lines);
      // }
      // svg {perspective: 1000px;}
      // .grid {
        // z-index: 100;
        // position: relative;
        // transform: translateZ(100px);
        // transform-origin: 0 0;
      // }
      // first-level containers use background color
      /*.node *, .actor, .activation0, .activation1, .activation2,
      .labelBox{
        fill: var(--mermaid-bg0);
      }
      .edgeLabel * {
        background-color: var(--mermaid-bg0);
      }
      // second-level containers are darker
      .cluster rect, .note{
        fill: var(--mermaid-bg1);
      }*/
      // all containers use bold strokes
      // .node *, .cluster rect, .actor, .note, .loopLine,
      // .labelBox, .pieCircle, .actor-line, .relation,
      // .classGroup *{
      //   stroke-width: 2px;
      // }
      /*// large containers use rounded corners
      svg, .cluster rect, .actor{
        rx: 5px;
        ry: 5px;
        border-radius: 5px;
      }
      // connectors use primary color
      .flowchart-link, .marker, .edgePath *, .messageLine0,
      .messageLine1, #arrowhead path, #crosshead path{
        stroke: var(--mermaid-pop);
        fill: var(--mermaid-pop);
      }
      // highlighted elements use primary color
      .activation0, .activation1, .activation2{
        stroke-width: 2px;
        stroke: var(--mermaid-pop);
      }
      // text
      .node .label, .nodeLabel, .edgeLabel, rect.actor{
        color: var(--mermaid-text);
      }
      text.actor > tspan, .noteText > tspan, text.messageText,
      text.labelText, .loopText > tspan, text.pieTitleText,
      .legend text{
        fill: var(--mermaid-text);
      }
      text.messageText{
        stroke: 1px;
        stroke: var(--mermaid-text);
      }
      */
      cursor: default; // No text cursor
      &.error {
        font-family: @font-code; // For the error messages
        color: var(--fg-error);
      }
    }

    .cm-escape-char { color:var(--grey-3); }

    // Horizontal ruler
    .cm-hr {
      color: var(--c-primary);
      font-family: @font-code;
      font-weight: bold;
    }

    // Add a cool indicator to the front matter -- overwrites the .cm-hr style above
    .cm-yaml-frontmatter-start {
      color: inherit;

      &::after {
        content: "YAML Frontmatter";
        display: inline-block;
        margin-left: 10px;
        padding: 0px 5px;
        font-size: 60%;
        font-weight: normal;
        vertical-align: middle;
        color: rgb(180, 180, 180);
        background-color: rgb(240, 240, 240);
      }
    }

    .CodeMirror-foldmarker {
      background-color: var(--grey-0);
      color: var(--grey-3);

      &:hover { background-color: var(--grey-1); }
    }

    .CodeMirror-guttermarker-subtle { color: #dadada; }

    // Heading tags
    .heading-tag {
      color: var(--grey-1);
      transition: 0.2s all ease;
      &:hover {
        color: var(--grey-3);
        background-color: var(--grey-1);
      }
    }

    // The active line when in typewriter mode
    .CodeMirror-linebackground.typewriter-active-line {
      border-top: 2px solid @grey-3;
      border-bottom: 2px solid @grey-3;
      background-color: @grey-1;
      margin-top: -2px;
      margin-bottom: -2px;
    }
}

.CodeMirror-focused .CodeMirror-selected { background-color: var(--selection-light); }
.CodeMirror .CodeMirror-selected { background-color: var(--selection-light); }
.CodeMirror-cursor { background: var(--c-primary); }

// Hint related stuff. Hints mustn't be scoped by .CodeMirror as they are
// attached to document.body, not the editor
.CodeMirror-hints {
  -webkit-box-shadow: 2px 3px 5px rgba(0,0,0,.2);
  -moz-box-shadow: 2px 3px 5px rgba(0,0,0,.2);
  box-shadow: 2px 3px 5px rgba(0,0,0,.2);
  border-radius: @border-radius;
  border: 1px solid var(--grey-1);

  background: white;
  font-size: 90%;
  li.CodeMirror-hint {
    color: var(--grey-7);

    &:hover { background-color: var(--grey-0); }
  }

  li.CodeMirror-hint-active {
    background: var(--c-primary);
    color: var(--grey-0);

    &:hover { background-color: var(--c-primary-shade); }
  }

  // Special tags
  .cm-hint-colour {
    color: var(--grey-3);
    background-color: var(--grey-2);
  }
}

// Custom styling for the various editors across the app
// -----------------------------------------------------------------------------
#editor .CodeMirror {
  // Comments in the main editor should have a background-color
  .cm-comment:not(.cm-formatting):not(.cm-fenced-code)  {
    background-color: var(--grey-0);
    &:first-child {
      border-top-left-radius: @border-radius;
      border-bottom-left-radius: @border-radius;
      padding-left: 5px;
    }
    &:last-child {
      border-top-right-radius: @border-radius;
      border-bottom-right-radius: @border-radius;
      padding-right: 5px;
    }
  }

  // We need to make sure inline elements (directly after & before formatting
  // elements) also have this nice padding and border.
  .cm-formatting + .cm-comment:not(.cm-formatting):not(.cm-fenced-code) {
    border-top-left-radius: @border-radius;
    border-bottom-left-radius: @border-radius;
    padding-left: 5px;
  }
  .cm-formatting  ~ .cm-comment:not(.cm-formatting):not(.cm-fenced-code){
    border-top-right-radius: @border-radius;
    border-bottom-right-radius: @border-radius;
    padding-right: 5px;
  }
}
